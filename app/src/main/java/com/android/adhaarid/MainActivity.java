package com.android.adhaarid;

import androidx.activity.result.ActivityResultLauncher;
import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;

import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.rekognition.AmazonRekognition;
import com.amazonaws.services.rekognition.AmazonRekognitionClient;
import com.amazonaws.services.rekognition.model.BoundingBox;
import com.amazonaws.services.rekognition.model.CompareFacesMatch;
import com.amazonaws.services.rekognition.model.CompareFacesRequest;
import com.amazonaws.services.rekognition.model.CompareFacesResult;
import com.amazonaws.services.rekognition.model.ComparedFace;
import com.amazonaws.services.rekognition.model.Image;
import com.amazonaws.util.IOUtils;
import com.facetec.sdk.FaceTecIDScanResult;
import com.facetec.sdk.FaceTecSDK;
import com.facetec.sdk.FaceTecSessionResult;
import com.microblink.blinkid.MicroblinkSDK;
import com.microblink.blinkid.activity.result.ResultStatus;
import com.microblink.blinkid.activity.result.contract.TwoSideDocumentScan;
import com.microblink.blinkid.entities.recognizers.blinkid.generic.BlinkIdMultiSideRecognizer;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.util.List;

import Processors.AuthenticateProcessor;
import Processors.Config;
import Processors.LivenessCheckProcessor;
import Processors.NetworkingHelpers;
import Processors.Processor;
import okhttp3.Call;
import okhttp3.Callback;


public class MainActivity extends AppCompatActivity {

    public FaceTecSessionResult latestSessionResult;
    public FaceTecIDScanResult latestIDScanResult;
    public Processor latestProcessor;

    private boolean isSessionPreparingToLaunch = false;
    public static File cacheDir;

//    public String sourceImage = "/storage/emulated/0/Pictures/Title.jpg";
//    public String targetImage = "/storage/emulated/0/Pictures/Title.jpg";

    public static String sourceImageString;
    public static String targetImageString;
    public static InputStream inputStream;
    public static byte[] sourceImageByteArray;
    public static byte[] targetImageByteArray;
    public static ByteBuffer sourceImageByteBuffer;
    public static ByteBuffer targetImageByteBuffer;

    private void resetLatestResults() {
        this.latestSessionResult = null;
        this.latestIDScanResult = null;
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Config.initializeFaceTecSDKFromAutogeneratedConfig(this, new FaceTecSDK.InitializeCallback() {
            @Override
            public void onCompletion(final boolean successful) {
                if(successful) {
                    Log.d("testing", "initialized successful");
                }
                else {
                    Log.d("testing", "initialized unsuccessful");
                }
            }
        });


        MicroblinkSDK.setLicenseKey("**My secret key**",this);

        ActivityResultLauncher<Void> resultLauncher = registerForActivityResult(
                new TwoSideDocumentScan(),
                twoSideScanResult -> {
                    ResultStatus resultScanStatus = twoSideScanResult.getResultStatus();
                    if (resultScanStatus == ResultStatus.FINISHED) {
                        // code after a successful scan
                        // use result.getResult() for fetching results, for example:
//                        String firstName = twoSideScanResult.getResult().getFirstName().value();
                        Log.d("testing", "Finished");
                        BlinkIdMultiSideRecognizer.Result result = twoSideScanResult.getResult();
//                        Log.d("testing", result.getEncodedFaceImage().toString());

                        getSessionToken(new SessionTokenCallback() {
                            @Override
                            public void onSessionTokenReceived(String sessionToken) throws IOException {
                                resetLatestResults();
                                isSessionPreparingToLaunch = false;
//                                inputStream = new ByteArrayInputStream(result.getEncodedFaceImage().toString().getBytes(StandardCharsets.UTF_8));
                                sourceImageString = result.getEncodedFaceImage().toString();
                                targetImageString = result.getEncodedFaceImage().toString();
                                sourceImageByteArray = result.getEncodedFaceImage();
                                targetImageByteArray = result.getEncodedFaceImage();
                                inputStream = new ByteArrayInputStream(sourceImageByteArray);
                                Log.d("testing", "Image print try: "+result.getFaceImage());

                                File f = new File(getCacheDir(), "scanimage1.jpeg");
                                Log.d("testing", f.createNewFile()+"");
                                cacheDir = getCodeCacheDir();
                                Log.d("testing", f.getAbsolutePath());

                                //Convert bitmap to byte array
                                Bitmap bitmap = BitmapFactory.decodeByteArray(result.getEncodedFaceImage(), 0, result.getEncodedFaceImage().length);
                                ByteArrayOutputStream bos = new ByteArrayOutputStream();
//                                bitmap.compress(Bitmap.CompressFormat.JPEG, 0 /*ignored for PNG*/, bos);
                                byte[] bitmapdata = bos.toByteArray();

                                //write the bytes in file
                                FileOutputStream fos = new FileOutputStream(f);
                                fos.write(bitmapdata);

                                fos.flush();
                                fos.close();

                                runAWSRekognitionCompareFaces();
//                                sourceImageByteBuffer = result.getFaceImage().getBuffer();
//                                targetImageByteBuffer = result.getFaceImage().getBuffer();
//                                Log.d("testing", "testsample2: "+result.getFaceImage().getBuffer());
//                                latestProcessor = new LivenessCheckProcessor(sessionToken, MainActivity.this);
//                                latestProcessor = new AuthenticateProcessor( sessionToken, MainActivity.this);
                            }
                        });
                    } else if (resultScanStatus == ResultStatus.CANCELLED) {
                        // code after a cancelled scan
                        Log.d("testing", "Cancelled");
                    } else if (resultScanStatus == ResultStatus.EXCEPTION) {
                        // code after a failed scan
                        Log.d("testing", "Exception");
                    }
                }
        );

        resultLauncher.launch(null);

    }

    public static void runAWSRekognitionCompareFaces(){
        ByteBuffer sourceImageBytes = null;
        ByteBuffer targetImageBytes = null;
        Float similarityThreshold = 70F;
        AmazonRekognition rekognitionClient = new AmazonRekognitionClient(new BasicAWSCredentials("**key**", "**secret key**"));

        try {
            InputStream inputStream1 = Files.newInputStream(new File("/data/user/0/com.android.adhaarid/cache/scanimage1.jpeg").toPath());
//            Log.d("testing", Paths.get("formal_passport.jpg").toAbsolutePath().toString());
//            Log.d("testing", getDataDir().getAbsolutePath());
//            byte[] temp = IOUtils.toByteArray(inputStream);
//            sourceImageBytes = ByteBuffer.wrap(temp);
            sourceImageBytes = ByteBuffer.wrap(IOUtils.toByteArray(inputStream1));
//            Log.d("testing", "temp val stream"+inputStream+"     "+temp.length);
//            for(int i=0;i<temp.length;i++){
//                Log.d("testing", "temp val"+temp[i]);
//            }
//            Log.d("testing", sourceImageBytes.toString());
        }
        catch(Exception e)
        {
            Log.d("testing", "exception1: "+e);
//            System.out.println("Failed to load source image " + sourceImage);
//            System.exit(1);
        }
        try  {
            InputStream inputStream1 = Files.newInputStream(new File("/data/user/0/com.android.adhaarid/cache/scanimage1.jpeg").toPath());
            targetImageBytes = ByteBuffer.wrap(IOUtils.toByteArray(inputStream1));
//            targetImageBytes = ByteBuffer.wrap(targetImageString.getBytes(StandardCharsets.UTF_8));
//            Log.d("testing", "byte buffer: "+targetImageBytes.toString());
        }
        catch(Exception e)
        {
            Log.d("testing", "exception2: "+e);
//            System.out.println("Failed to load target images: " + targetImage);
//            System.exit(1);
        }
//        Log.d("testing", sourceImageBytes.toString());
//        Log.d("testing", targetImageBytes.toString());
        Image source = new Image()
                .withBytes(sourceImageBytes);
        Image target = new Image()
                .withBytes(targetImageBytes);

        CompareFacesRequest request = new CompareFacesRequest()
                .withSourceImage(source)
                .withTargetImage(target)
                .withSimilarityThreshold(similarityThreshold);


        // Call operation



        class CallAWS extends AsyncTask<Void, Void, CompareFacesResult> {
            protected CompareFacesResult doInBackground(Void... urls) {
                CompareFacesResult compareFacesResult = rekognitionClient.compareFaces(request);
                return compareFacesResult;
            }

            protected void onProgressUpdate(Integer... progress) {
            }

            protected void onPostExecute(CompareFacesResult compareFacesResult) {
                // Display results
                Log.d("testing","1");
                List<CompareFacesMatch> faceDetails = compareFacesResult.getFaceMatches();
                for (CompareFacesMatch match: faceDetails){
                    ComparedFace face= match.getFace();
                    BoundingBox position = face.getBoundingBox();
                    Log.d("testing", "Face at " + position.getLeft().toString()
                            + " " + position.getTop()
                            + " matches with " + face.getConfidence().toString()
                            + "% confidence.");

                }
                List<ComparedFace> uncompared = compareFacesResult.getUnmatchedFaces();

                Log.d("testing", "There was " + uncompared.size()
                        + " face(s) that did not match");
                Log.d("testing","Source image rotation: " + compareFacesResult.getSourceImageOrientationCorrection());
                Log.d("testing","target image rotation: " + compareFacesResult.getTargetImageOrientationCorrection());
            }
        }
        new CallAWS().execute();
    }
    public void onLivenessCheckPressed(View v){
        isSessionPreparingToLaunch = true;

        getSessionToken(new SessionTokenCallback() {
            @Override
            public void onSessionTokenReceived(String sessionToken) {
                resetLatestResults();
                isSessionPreparingToLaunch = false;
                latestProcessor = new LivenessCheckProcessor(sessionToken, MainActivity.this);
            }
        });
    }

    public void getSessionToken(final SessionTokenCallback sessionTokenCallback) {
//            utils.showSessionTokenConnectionText();

        // Do the network call and handle result
        okhttp3.Request request = new okhttp3.Request.Builder()
                .header("X-Device-Key", Config.DeviceKeyIdentifier)
                .header("User-Agent", FaceTecSDK.createFaceTecAPIUserAgentString(""))
                .header("X-User-Agent", FaceTecSDK.createFaceTecAPIUserAgentString(""))
                .url(Config.BaseURL + "/session-token")
                .get()
                .build();

        NetworkingHelpers.getApiClient().newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                e.printStackTrace();
                Log.d("FaceTecSDKSampleApp", "Exception raised while attempting HTTPS call.");

                // If this comes from HTTPS cancel call, don't set the sub code to NETWORK_ERROR.
                if(!e.getMessage().equals(NetworkingHelpers.OK_HTTP_RESPONSE_CANCELED)) {
//                        utils.handleErrorGettingServerSessionToken();
                }
            }

            @Override
            public void onResponse(Call call, okhttp3.Response response) throws IOException {
                String responseString = response.body().string();
                response.body().close();
                try {
                    JSONObject responseJSON = new JSONObject(responseString);
                    if(responseJSON.has("sessionToken")) {
//                            utils.hideSessionTokenConnectionText();
                        sessionTokenCallback.onSessionTokenReceived(responseJSON.getString("sessionToken"));
                    }
                    else {
//                            utils.handleErrorGettingServerSessionToken();
                    }
                }
                catch(JSONException e) {
                    e.printStackTrace();
                    Log.d("FaceTecSDKSampleApp", "Exception raised while attempting to parse JSON result.");
//                        utils.handleErrorGettingServerSessionToken();
                }
            }
        });
    }

    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (latestProcessor == null) {
            Log.d("testing","returned");
            return;
        }

//        utils.displayStatus("See logs for more details.");
//        utils.fadeInMainUI();

        // At this point, you have already handled all results in your Processor code.
        if (!this.latestProcessor.isSuccess()) {
            Log.d("testing", "hey response: "+data.getDataString());
            // Reset the enrollment identifier.
//            latestExternalDatabaseRefID = "";
        }
    }



}
